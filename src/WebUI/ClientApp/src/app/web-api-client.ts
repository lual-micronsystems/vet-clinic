/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IPetClient {
    getPets(): Observable<PetsVm>;
}

@Injectable({
    providedIn: 'root'
})
export class PetClient implements IPetClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getPets(): Observable<PetsVm> {
        let url_ = this.baseUrl + "/api/Pet/GetPets";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPets(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPets(<any>response_);
                } catch (e) {
                    return <Observable<PetsVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<PetsVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetPets(response: HttpResponseBase): Observable<PetsVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PetsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PetsVm>(<any>null);
    }
}

export interface IUserClient {
    getUsers(): Observable<UsersVm>;
    createUser(command: CreateUserCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class UserClient implements IUserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getUsers(): Observable<UsersVm> {
        let url_ = this.baseUrl + "/api/User/GetUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUsers(<any>response_);
                } catch (e) {
                    return <Observable<UsersVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<UsersVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetUsers(response: HttpResponseBase): Observable<UsersVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UsersVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UsersVm>(<any>null);
    }

    createUser(command: CreateUserCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/User/CreateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUser(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processCreateUser(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }
}

export interface IVisitClient {
    getVisits(): Observable<VisitsVm>;
    getVisitsByPet(petId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfVisitDto>;
}

@Injectable({
    providedIn: 'root'
})
export class VisitClient implements IVisitClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getVisits(): Observable<VisitsVm> {
        let url_ = this.baseUrl + "/api/Visit/GetVisits";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVisits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVisits(<any>response_);
                } catch (e) {
                    return <Observable<VisitsVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<VisitsVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetVisits(response: HttpResponseBase): Observable<VisitsVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VisitsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VisitsVm>(<any>null);
    }

    getVisitsByPet(petId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfVisitDto> {
        let url_ = this.baseUrl + "/api/Visit/GetVisitsByPet?";
        if (petId === null)
            throw new Error("The parameter 'petId' cannot be null.");
        else if (petId !== undefined)
            url_ += "PetId=" + encodeURIComponent("" + petId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVisitsByPet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVisitsByPet(<any>response_);
                } catch (e) {
                    return <Observable<PaginatedListOfVisitDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PaginatedListOfVisitDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVisitsByPet(response: HttpResponseBase): Observable<PaginatedListOfVisitDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfVisitDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaginatedListOfVisitDto>(<any>null);
    }
}

export class PetsVm implements IPetsVm {
    pets?: PetDto[] | undefined;

    constructor(data?: IPetsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["pets"])) {
                this.pets = [] as any;
                for (let item of _data["pets"])
                    this.pets!.push(PetDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PetsVm {
        data = typeof data === 'object' ? data : {};
        let result = new PetsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.pets)) {
            data["pets"] = [];
            for (let item of this.pets)
                data["pets"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPetsVm {
    pets?: PetDto[] | undefined;
}

export class PetDto implements IPetDto {
    id?: number;
    petName?: string | undefined;
    petType?: number;
    breed?: string | undefined;
    birthDate?: Date | undefined;
    userId?: number;
    visits?: VisitDto[] | undefined;

    constructor(data?: IPetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.petName = _data["petName"];
            this.petType = _data["petType"];
            this.breed = _data["breed"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.userId = _data["userId"];
            if (Array.isArray(_data["visits"])) {
                this.visits = [] as any;
                for (let item of _data["visits"])
                    this.visits!.push(VisitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PetDto {
        data = typeof data === 'object' ? data : {};
        let result = new PetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["petName"] = this.petName;
        data["petType"] = this.petType;
        data["breed"] = this.breed;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["userId"] = this.userId;
        if (Array.isArray(this.visits)) {
            data["visits"] = [];
            for (let item of this.visits)
                data["visits"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPetDto {
    id?: number;
    petName?: string | undefined;
    petType?: number;
    breed?: string | undefined;
    birthDate?: Date | undefined;
    userId?: number;
    visits?: VisitDto[] | undefined;
}

export class VisitDto implements IVisitDto {
    id?: number;
    visitType?: number;
    visitDate?: Date;
    notes?: string | undefined;
    petId?: number;

    constructor(data?: IVisitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.visitType = _data["visitType"];
            this.visitDate = _data["visitDate"] ? new Date(_data["visitDate"].toString()) : <any>undefined;
            this.notes = _data["notes"];
            this.petId = _data["petId"];
        }
    }

    static fromJS(data: any): VisitDto {
        data = typeof data === 'object' ? data : {};
        let result = new VisitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["visitType"] = this.visitType;
        data["visitDate"] = this.visitDate ? this.visitDate.toISOString() : <any>undefined;
        data["notes"] = this.notes;
        data["petId"] = this.petId;
        return data; 
    }
}

export interface IVisitDto {
    id?: number;
    visitType?: number;
    visitDate?: Date;
    notes?: string | undefined;
    petId?: number;
}

export class UsersVm implements IUsersVm {
    users?: UserDto[] | undefined;

    constructor(data?: IUsersVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UsersVm {
        data = typeof data === 'object' ? data : {};
        let result = new UsersVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUsersVm {
    users?: UserDto[] | undefined;
}

export class UserDto implements IUserDto {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    email?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    userType?: number;
    active?: number | undefined;
    pets?: PetDto2[] | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.userType = _data["userType"];
            this.active = _data["active"];
            if (Array.isArray(_data["pets"])) {
                this.pets = [] as any;
                for (let item of _data["pets"])
                    this.pets!.push(PetDto2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["userType"] = this.userType;
        data["active"] = this.active;
        if (Array.isArray(this.pets)) {
            data["pets"] = [];
            for (let item of this.pets)
                data["pets"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserDto {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    email?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    userType?: number;
    active?: number | undefined;
    pets?: PetDto2[] | undefined;
}

export class PetDto2 implements IPetDto2 {
    id?: number;
    petName?: string | undefined;
    petType?: number;
    breed?: string | undefined;
    birthDate?: Date | undefined;
    userId?: number;

    constructor(data?: IPetDto2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.petName = _data["petName"];
            this.petType = _data["petType"];
            this.breed = _data["breed"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): PetDto2 {
        data = typeof data === 'object' ? data : {};
        let result = new PetDto2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["petName"] = this.petName;
        data["petType"] = this.petType;
        data["breed"] = this.breed;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["userId"] = this.userId;
        return data; 
    }
}

export interface IPetDto2 {
    id?: number;
    petName?: string | undefined;
    petType?: number;
    breed?: string | undefined;
    birthDate?: Date | undefined;
    userId?: number;
}

export class CreateUserCommand implements ICreateUserCommand {
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    email?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    userType?: number;
    active?: number | undefined;

    constructor(data?: ICreateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.userType = _data["userType"];
            this.active = _data["active"];
        }
    }

    static fromJS(data: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["userType"] = this.userType;
        data["active"] = this.active;
        return data; 
    }
}

export interface ICreateUserCommand {
    firstName?: string | undefined;
    lastName?: string | undefined;
    middleName?: string | undefined;
    email?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    userType?: number;
    active?: number | undefined;
}

export class VisitsVm implements IVisitsVm {
    visits?: VisitDto[] | undefined;

    constructor(data?: IVisitsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["visits"])) {
                this.visits = [] as any;
                for (let item of _data["visits"])
                    this.visits!.push(VisitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VisitsVm {
        data = typeof data === 'object' ? data : {};
        let result = new VisitsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.visits)) {
            data["visits"] = [];
            for (let item of this.visits)
                data["visits"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IVisitsVm {
    visits?: VisitDto[] | undefined;
}

export class PaginatedListOfVisitDto implements IPaginatedListOfVisitDto {
    items?: VisitDto[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfVisitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(VisitDto.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfVisitDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfVisitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data; 
    }
}

export interface IPaginatedListOfVisitDto {
    items?: VisitDto[] | undefined;
    pageIndex?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}